package com.careerconsultancy.service.web.employee;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.careerconsultancy.entites.logincredential.LoginCredential;
import com.careerconsultancy.entities.employee.EmployeeDetails;
import com.careerconsultancy.entities.job.JobInfo;
import com.careerconsultancy.entities.jobseeker.JobSeeker;
import com.careerconsultancy.entities.jobseeker.JobSeekerEducationalDetails;
import com.careerconsultancy.entities.jobseeker.JobSeekerPersonalDetails;
import com.careerconsultancy.entities.jobseeker.JobSeekerProffesionalDetails;
import com.careerconsultancy.service.employee.EmployeeService;
import com.careerconsultancy.service.job.JobInfoService;
import com.careerconsultancy.service.logincredential.LoginCredentialService;
import com.careerconsultancy.services.jobseeker.JobseekerService;

@RestController
@RequestMapping("/employee")
public class EmployeeServiceWeb {

	@Autowired
	private EmployeeService employeeService;
	
	@Autowired
	private JobInfoService jobInfoService;
	
	@Autowired
	private LoginCredentialService loginCredentialService;
	
	
	@PostMapping
	public String createEmployee(EmployeeDetails employeeDetails) {
		String role="employee";
		employeeService.createEmployee(employeeDetails);
		LoginCredential loginCredential=new LoginCredential();
		loginCredential.setEmailId(employeeDetails.getEmpEmail());
		loginCredential.setPassword(employeeDetails.getEmpPassword());
		loginCredential.setRole(role);
		loginCredentialService.insertDetails(loginCredential);
		return "Employee record inserted";
	}
	
	@DeleteMapping
	public String deleteEmployee(EmployeeDetails employeeDetails) {
		employeeService.deleteEmployee(employeeDetails);
		LoginCredential loginCredential=new LoginCredential();
		loginCredential.setEmailId(employeeDetails.getEmpEmail());
		loginCredential.setPassword(employeeDetails.getEmpPassword());
		loginCredentialService.deleteDetails(loginCredential);
		return "Employee record deleted";	
	}
	
	@PutMapping
	public String updateEmployeeDetails(EmployeeDetails employeeDetails) {
		employeeService.updateEmployee(employeeDetails);
		LoginCredential loginCredential=new LoginCredential();
		loginCredential.setEmailId(employeeDetails.getEmpEmail());
		loginCredential.setPassword(employeeDetails.getEmpPassword());
		loginCredentialService.updateDetails(loginCredential);
		return "employee details updated";
	}
	
	@GetMapping
	public List<EmployeeDetails> viewDetails() {
		return employeeService.viewAllEmployee();
	}
	
	@PostMapping("/postjob")
	public String postNewJob(JobInfo jobInfo) {
		jobInfoService.postJob(jobInfo);
		return "new job posted";
	}
	
	@DeleteMapping("/deletejob")
	public String deleteJob(JobInfo jobInfo) {
		jobInfoService.deleteJob(jobInfo);
		return "job deleted";	
	}
	
	@PutMapping("/updatejob")
	public String updateJob(JobInfo jobInfo) {
		jobInfoService.editJob(jobInfo);
		return "job details edited";
	}
	
	@GetMapping("/viewjobs")
	public List<JobInfo> viewAllJobs() {
		return jobInfoService.viewAllJob();
	}
	
	@GetMapping("/viewApplicant")
	public JobSeeker viewApplicant() {
		JobSeeker jobSeeker=new JobSeeker();
		jobSeeker.setJobSeekerEducationalDetails(jobSeekerEducationalDetails);
		return jobSeeker;
	}
}
